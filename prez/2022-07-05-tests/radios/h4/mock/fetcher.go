// Code generated by MockGen. DO NOT EDIT.
// Source: ./hi.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	goradios "gitlab.com/AgentNemo/goradios"
)

// MockStationsFetcher is a mock of StationsFetcher interface.
type MockStationsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockStationsFetcherMockRecorder
}

// MockStationsFetcherMockRecorder is the mock recorder for MockStationsFetcher.
type MockStationsFetcherMockRecorder struct {
	mock *MockStationsFetcher
}

// NewMockStationsFetcher creates a new mock instance.
func NewMockStationsFetcher(ctrl *gomock.Controller) *MockStationsFetcher {
	mock := &MockStationsFetcher{ctrl: ctrl}
	mock.recorder = &MockStationsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStationsFetcher) EXPECT() *MockStationsFetcherMockRecorder {
	return m.recorder
}

// FetchStations mocks base method.
func (m *MockStationsFetcher) FetchStations(by goradios.StationsBy, term string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchStations", by, term)
}

// FetchStations indicates an expected call of FetchStations.
func (mr *MockStationsFetcherMockRecorder) FetchStations(by, term interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStations", reflect.TypeOf((*MockStationsFetcher)(nil).FetchStations), by, term)
}

// MarshalJSON mocks base method.
func (m *MockStationsFetcher) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockStationsFetcherMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockStationsFetcher)(nil).MarshalJSON))
}
